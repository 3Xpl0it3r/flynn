// Code generated by protoc-gen-go. DO NOT EDIT.
// source: router.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RouteConfig_Version int32

const (
	// Unused/invalid default value.
	RouteConfig_VERSION_UNSPECIFIED RouteConfig_Version = 0
	// VERSION_1 represents route config v1.
	RouteConfig_VERSION_1 RouteConfig_Version = 1
)

var RouteConfig_Version_name = map[int32]string{
	0: "VERSION_UNSPECIFIED",
	1: "VERSION_1",
}

var RouteConfig_Version_value = map[string]int32{
	"VERSION_UNSPECIFIED": 0,
	"VERSION_1":           1,
}

func (x RouteConfig_Version) String() string {
	return proto.EnumName(RouteConfig_Version_name, int32(x))
}

func (RouteConfig_Version) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{10, 0}
}

type RouteChange_Action int32

const (
	// Unused/invalid default value.
	RouteChange_ACTION_UNSPECIFIED RouteChange_Action = 0
	// ACTION_CREATE represents a route that was created.
	RouteChange_ACTION_CREATE RouteChange_Action = 1
	// ACTION_UPDATE represents a route that was updated.
	RouteChange_ACTION_UPDATE RouteChange_Action = 2
	// ACTION_DELETE represents a route that was deleted.
	RouteChange_ACTION_DELETE RouteChange_Action = 3
)

var RouteChange_Action_name = map[int32]string{
	0: "ACTION_UNSPECIFIED",
	1: "ACTION_CREATE",
	2: "ACTION_UPDATE",
	3: "ACTION_DELETE",
}

var RouteChange_Action_value = map[string]int32{
	"ACTION_UNSPECIFIED": 0,
	"ACTION_CREATE":      1,
	"ACTION_UPDATE":      2,
	"ACTION_DELETE":      3,
}

func (x RouteChange_Action) String() string {
	return proto.EnumName(RouteChange_Action_name, int32(x))
}

func (RouteChange_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{12, 0}
}

// A TLS key algorithm.
type Key_Algorithm int32

const (
	// Default value.
	Key_KEY_ALG_UNSPECIFIED Key_Algorithm = 0
	// NIST ECC P-256 curve
	Key_KEY_ALG_ECC_P256 Key_Algorithm = 1
	// 2048-bit RSA
	Key_KEY_ALG_RSA_2048 Key_Algorithm = 2
	// 4096-bit RSA
	Key_KEY_ALG_RSA_4096 Key_Algorithm = 3
)

var Key_Algorithm_name = map[int32]string{
	0: "KEY_ALG_UNSPECIFIED",
	1: "KEY_ALG_ECC_P256",
	2: "KEY_ALG_RSA_2048",
	3: "KEY_ALG_RSA_4096",
}

var Key_Algorithm_value = map[string]int32{
	"KEY_ALG_UNSPECIFIED": 0,
	"KEY_ALG_ECC_P256":    1,
	"KEY_ALG_RSA_2048":    2,
	"KEY_ALG_RSA_4096":    3,
}

func (x Key_Algorithm) String() string {
	return proto.EnumName(Key_Algorithm_name, int32(x))
}

func (Key_Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{14, 0}
}

// SetRoutesRequest is a request to set a list of app routes.
type SetRoutesRequest struct {
	// app_routes are the app routes to set.
	AppRoutes []*AppRoutes `protobuf:"bytes,1,rep,name=app_routes,json=appRoutes,proto3" json:"app_routes,omitempty"`
	// dry_run indicates whether to just generate the changes that would be
	// applied to existing routes by this request (true) or to also atomically
	// apply the route changes (false).
	DryRun bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// expected_state is the expected state of existing routes to apply this
	// request to, with the request failing if the actual state differs.
	ExpectedState        []byte   `protobuf:"bytes,3,opt,name=expected_state,json=expectedState,proto3" json:"expected_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRoutesRequest) Reset()         { *m = SetRoutesRequest{} }
func (m *SetRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*SetRoutesRequest) ProtoMessage()    {}
func (*SetRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{0}
}

func (m *SetRoutesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRoutesRequest.Unmarshal(m, b)
}
func (m *SetRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRoutesRequest.Marshal(b, m, deterministic)
}
func (m *SetRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRoutesRequest.Merge(m, src)
}
func (m *SetRoutesRequest) XXX_Size() int {
	return xxx_messageInfo_SetRoutesRequest.Size(m)
}
func (m *SetRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRoutesRequest proto.InternalMessageInfo

func (m *SetRoutesRequest) GetAppRoutes() []*AppRoutes {
	if m != nil {
		return m.AppRoutes
	}
	return nil
}

func (m *SetRoutesRequest) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *SetRoutesRequest) GetExpectedState() []byte {
	if m != nil {
		return m.ExpectedState
	}
	return nil
}

// SetRoutesResponse is a response to a SetRoutes request.
type SetRoutesResponse struct {
	// route_changes is the list of route changes that were either applied if
	// dry_run=false or that would have been applied if dry_run=true.
	RouteChanges []*RouteChange `protobuf:"bytes,1,rep,name=route_changes,json=routeChanges,proto3" json:"route_changes,omitempty"`
	// dry_run indicates whether the request was a dry run or not.
	DryRun bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// applied_to_state is the state of the existing routes that this request was
	// applied to, and can be used as the expected_state in a subsequent request
	// to confirm the application of a dry run.
	AppliedToState       []byte   `protobuf:"bytes,3,opt,name=applied_to_state,json=appliedToState,proto3" json:"applied_to_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRoutesResponse) Reset()         { *m = SetRoutesResponse{} }
func (m *SetRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*SetRoutesResponse) ProtoMessage()    {}
func (*SetRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{1}
}

func (m *SetRoutesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRoutesResponse.Unmarshal(m, b)
}
func (m *SetRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRoutesResponse.Marshal(b, m, deterministic)
}
func (m *SetRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRoutesResponse.Merge(m, src)
}
func (m *SetRoutesResponse) XXX_Size() int {
	return xxx_messageInfo_SetRoutesResponse.Size(m)
}
func (m *SetRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetRoutesResponse proto.InternalMessageInfo

func (m *SetRoutesResponse) GetRouteChanges() []*RouteChange {
	if m != nil {
		return m.RouteChanges
	}
	return nil
}

func (m *SetRoutesResponse) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *SetRoutesResponse) GetAppliedToState() []byte {
	if m != nil {
		return m.AppliedToState
	}
	return nil
}

// ListAppRoutesRequest is a request to list routes for a set of apps.
type ListAppRoutesRequest struct {
	// apps is the set of apps to list routes for.
	Apps                 []string `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAppRoutesRequest) Reset()         { *m = ListAppRoutesRequest{} }
func (m *ListAppRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*ListAppRoutesRequest) ProtoMessage()    {}
func (*ListAppRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{2}
}

func (m *ListAppRoutesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAppRoutesRequest.Unmarshal(m, b)
}
func (m *ListAppRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAppRoutesRequest.Marshal(b, m, deterministic)
}
func (m *ListAppRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppRoutesRequest.Merge(m, src)
}
func (m *ListAppRoutesRequest) XXX_Size() int {
	return xxx_messageInfo_ListAppRoutesRequest.Size(m)
}
func (m *ListAppRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppRoutesRequest proto.InternalMessageInfo

func (m *ListAppRoutesRequest) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

// ListAppRoutesResponse is a response to list routes for a set of apps.
type ListAppRoutesResponse struct {
	// app_routes are the requested routes.
	AppRoutes []*AppRoutes `protobuf:"bytes,1,rep,name=app_routes,json=appRoutes,proto3" json:"app_routes,omitempty"`
	// state is the state of the returned routes that can be used as the
	// expected_state in a subsequent call to SetRoutes.
	State                []byte   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAppRoutesResponse) Reset()         { *m = ListAppRoutesResponse{} }
func (m *ListAppRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*ListAppRoutesResponse) ProtoMessage()    {}
func (*ListAppRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{3}
}

func (m *ListAppRoutesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAppRoutesResponse.Unmarshal(m, b)
}
func (m *ListAppRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAppRoutesResponse.Marshal(b, m, deterministic)
}
func (m *ListAppRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppRoutesResponse.Merge(m, src)
}
func (m *ListAppRoutesResponse) XXX_Size() int {
	return xxx_messageInfo_ListAppRoutesResponse.Size(m)
}
func (m *ListAppRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppRoutesResponse proto.InternalMessageInfo

func (m *ListAppRoutesResponse) GetAppRoutes() []*AppRoutes {
	if m != nil {
		return m.AppRoutes
	}
	return nil
}

func (m *ListAppRoutesResponse) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// A request to list TLS keys.
type ListKeysRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListKeysRequest) Reset()         { *m = ListKeysRequest{} }
func (m *ListKeysRequest) String() string { return proto.CompactTextString(m) }
func (*ListKeysRequest) ProtoMessage()    {}
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{4}
}

func (m *ListKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListKeysRequest.Unmarshal(m, b)
}
func (m *ListKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListKeysRequest.Marshal(b, m, deterministic)
}
func (m *ListKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListKeysRequest.Merge(m, src)
}
func (m *ListKeysRequest) XXX_Size() int {
	return xxx_messageInfo_ListKeysRequest.Size(m)
}
func (m *ListKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListKeysRequest proto.InternalMessageInfo

// A response containing a list of TLS keys.
type ListKeysResponse struct {
	// The TLS keys.
	Keys                 []*Key   `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListKeysResponse) Reset()         { *m = ListKeysResponse{} }
func (m *ListKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListKeysResponse) ProtoMessage()    {}
func (*ListKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{5}
}

func (m *ListKeysResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListKeysResponse.Unmarshal(m, b)
}
func (m *ListKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListKeysResponse.Marshal(b, m, deterministic)
}
func (m *ListKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListKeysResponse.Merge(m, src)
}
func (m *ListKeysResponse) XXX_Size() int {
	return xxx_messageInfo_ListKeysResponse.Size(m)
}
func (m *ListKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListKeysResponse proto.InternalMessageInfo

func (m *ListKeysResponse) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

// A request to create a new TLS key.
type CreateKeyRequest struct {
	// Required. The private key data. It must be DER-encoded PKCS#1 (RSA),
	// PKCS#8 (RSA/ECC), or SEC1 (ECC).
	PrivateKey           []byte   `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateKeyRequest) Reset()         { *m = CreateKeyRequest{} }
func (m *CreateKeyRequest) String() string { return proto.CompactTextString(m) }
func (*CreateKeyRequest) ProtoMessage()    {}
func (*CreateKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{6}
}

func (m *CreateKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKeyRequest.Unmarshal(m, b)
}
func (m *CreateKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKeyRequest.Marshal(b, m, deterministic)
}
func (m *CreateKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKeyRequest.Merge(m, src)
}
func (m *CreateKeyRequest) XXX_Size() int {
	return xxx_messageInfo_CreateKeyRequest.Size(m)
}
func (m *CreateKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKeyRequest proto.InternalMessageInfo

func (m *CreateKeyRequest) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// A response containing a TLS key that was created.
type CreateKeyResponse struct {
	// The TLS key that was created.
	Key                  *Key     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateKeyResponse) Reset()         { *m = CreateKeyResponse{} }
func (m *CreateKeyResponse) String() string { return proto.CompactTextString(m) }
func (*CreateKeyResponse) ProtoMessage()    {}
func (*CreateKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{7}
}

func (m *CreateKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKeyResponse.Unmarshal(m, b)
}
func (m *CreateKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKeyResponse.Marshal(b, m, deterministic)
}
func (m *CreateKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKeyResponse.Merge(m, src)
}
func (m *CreateKeyResponse) XXX_Size() int {
	return xxx_messageInfo_CreateKeyResponse.Size(m)
}
func (m *CreateKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKeyResponse proto.InternalMessageInfo

func (m *CreateKeyResponse) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// A request to delete a TLS key.
type DeleteKeyRequest struct {
	// Required. The TLS key resource name in the format `tls-keys/{KEY_ID}`
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteKeyRequest) Reset()         { *m = DeleteKeyRequest{} }
func (m *DeleteKeyRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteKeyRequest) ProtoMessage()    {}
func (*DeleteKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{8}
}

func (m *DeleteKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteKeyRequest.Unmarshal(m, b)
}
func (m *DeleteKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteKeyRequest.Marshal(b, m, deterministic)
}
func (m *DeleteKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteKeyRequest.Merge(m, src)
}
func (m *DeleteKeyRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteKeyRequest.Size(m)
}
func (m *DeleteKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteKeyRequest proto.InternalMessageInfo

func (m *DeleteKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A response containing a TLS key that was deleted.
type DeleteKeyResponse struct {
	// The TLS key that was deleted.
	Key                  *Key     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteKeyResponse) Reset()         { *m = DeleteKeyResponse{} }
func (m *DeleteKeyResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteKeyResponse) ProtoMessage()    {}
func (*DeleteKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{9}
}

func (m *DeleteKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteKeyResponse.Unmarshal(m, b)
}
func (m *DeleteKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteKeyResponse.Marshal(b, m, deterministic)
}
func (m *DeleteKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteKeyResponse.Merge(m, src)
}
func (m *DeleteKeyResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteKeyResponse.Size(m)
}
func (m *DeleteKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteKeyResponse proto.InternalMessageInfo

func (m *DeleteKeyResponse) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// RouteConfig is used to define routes in route config files.
type RouteConfig struct {
	// version is the version of a route config.
	Version RouteConfig_Version `protobuf:"varint,1,opt,name=version,proto3,enum=flynn.api.v1.RouteConfig_Version" json:"version,omitempty"`
	// app_routes are the app routes that the route config defines.
	AppRoutes            []*AppRoutes `protobuf:"bytes,2,rep,name=app_routes,json=appRoutes,proto3" json:"app_routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RouteConfig) Reset()         { *m = RouteConfig{} }
func (m *RouteConfig) String() string { return proto.CompactTextString(m) }
func (*RouteConfig) ProtoMessage()    {}
func (*RouteConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{10}
}

func (m *RouteConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteConfig.Unmarshal(m, b)
}
func (m *RouteConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteConfig.Marshal(b, m, deterministic)
}
func (m *RouteConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteConfig.Merge(m, src)
}
func (m *RouteConfig) XXX_Size() int {
	return xxx_messageInfo_RouteConfig.Size(m)
}
func (m *RouteConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RouteConfig proto.InternalMessageInfo

func (m *RouteConfig) GetVersion() RouteConfig_Version {
	if m != nil {
		return m.Version
	}
	return RouteConfig_VERSION_UNSPECIFIED
}

func (m *RouteConfig) GetAppRoutes() []*AppRoutes {
	if m != nil {
		return m.AppRoutes
	}
	return nil
}

// AppRoutes is a list of desired routes for an app.
type AppRoutes struct {
	// app is an identifier for the app.
	App string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// routes are the desired routes for the app.
	Routes               []*Route `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppRoutes) Reset()         { *m = AppRoutes{} }
func (m *AppRoutes) String() string { return proto.CompactTextString(m) }
func (*AppRoutes) ProtoMessage()    {}
func (*AppRoutes) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{11}
}

func (m *AppRoutes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppRoutes.Unmarshal(m, b)
}
func (m *AppRoutes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppRoutes.Marshal(b, m, deterministic)
}
func (m *AppRoutes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppRoutes.Merge(m, src)
}
func (m *AppRoutes) XXX_Size() int {
	return xxx_messageInfo_AppRoutes.Size(m)
}
func (m *AppRoutes) XXX_DiscardUnknown() {
	xxx_messageInfo_AppRoutes.DiscardUnknown(m)
}

var xxx_messageInfo_AppRoutes proto.InternalMessageInfo

func (m *AppRoutes) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *AppRoutes) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

// RouteChange is a change made to a route in response to a SetRoutes request.
type RouteChange struct {
	// action is the action that was performed.
	Action RouteChange_Action `protobuf:"varint,1,opt,name=action,proto3,enum=flynn.api.v1.RouteChange_Action" json:"action,omitempty"`
	// before is the route before the action was applied.
	Before *Route `protobuf:"bytes,2,opt,name=before,proto3" json:"before,omitempty"`
	// after is the route after the action was applied.
	After                *Route   `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteChange) Reset()         { *m = RouteChange{} }
func (m *RouteChange) String() string { return proto.CompactTextString(m) }
func (*RouteChange) ProtoMessage()    {}
func (*RouteChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{12}
}

func (m *RouteChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteChange.Unmarshal(m, b)
}
func (m *RouteChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteChange.Marshal(b, m, deterministic)
}
func (m *RouteChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteChange.Merge(m, src)
}
func (m *RouteChange) XXX_Size() int {
	return xxx_messageInfo_RouteChange.Size(m)
}
func (m *RouteChange) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteChange.DiscardUnknown(m)
}

var xxx_messageInfo_RouteChange proto.InternalMessageInfo

func (m *RouteChange) GetAction() RouteChange_Action {
	if m != nil {
		return m.Action
	}
	return RouteChange_ACTION_UNSPECIFIED
}

func (m *RouteChange) GetBefore() *Route {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *RouteChange) GetAfter() *Route {
	if m != nil {
		return m.After
	}
	return nil
}

// Route is a HTTP or TCP route.
type Route struct {
	// Output only. The unique identifier of this route resource in the format:
	// `apps/{APP_ID}/routes/{ROUTE_ID}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The parent resource name, in the format `apps/{APP_ID}` or
	// `apps/{APP_DISPLAY_NAME}`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The discoverd service target for this route.
	ServiceTarget *Route_ServiceTarget `protobuf:"bytes,3,opt,name=service_target,json=serviceTarget,proto3" json:"service_target,omitempty"`
	// Disable keep-alives between the router and backends for this route.
	DisableKeepAlives bool `protobuf:"varint,4,opt,name=disable_keep_alives,json=disableKeepAlives,proto3" json:"disable_keep_alives,omitempty"`
	// The protocol-specific configuration.
	//
	// Types that are valid to be assigned to Config:
	//	*Route_Http
	//	*Route_Tcp
	Config               isRoute_Config `protobuf_oneof:"config"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{13}
}

func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Route) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Route) GetServiceTarget() *Route_ServiceTarget {
	if m != nil {
		return m.ServiceTarget
	}
	return nil
}

func (m *Route) GetDisableKeepAlives() bool {
	if m != nil {
		return m.DisableKeepAlives
	}
	return false
}

type isRoute_Config interface {
	isRoute_Config()
}

type Route_Http struct {
	Http *Route_HTTP `protobuf:"bytes,5,opt,name=http,proto3,oneof"`
}

type Route_Tcp struct {
	Tcp *Route_TCP `protobuf:"bytes,6,opt,name=tcp,proto3,oneof"`
}

func (*Route_Http) isRoute_Config() {}

func (*Route_Tcp) isRoute_Config() {}

func (m *Route) GetConfig() isRoute_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Route) GetHttp() *Route_HTTP {
	if x, ok := m.GetConfig().(*Route_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Route) GetTcp() *Route_TCP {
	if x, ok := m.GetConfig().(*Route_Tcp); ok {
		return x.Tcp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Route) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Route_Http)(nil),
		(*Route_Tcp)(nil),
	}
}

// A discoverd service target.
type Route_ServiceTarget struct {
	// Required. The discoverd service name to route requests to.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Route to the service leader.
	Leader bool `protobuf:"varint,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// Wait for in-flight requests to this target to finish before backends are terminated.
	DrainBackends        bool     `protobuf:"varint,3,opt,name=drain_backends,json=drainBackends,proto3" json:"drain_backends,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route_ServiceTarget) Reset()         { *m = Route_ServiceTarget{} }
func (m *Route_ServiceTarget) String() string { return proto.CompactTextString(m) }
func (*Route_ServiceTarget) ProtoMessage()    {}
func (*Route_ServiceTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{13, 0}
}

func (m *Route_ServiceTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_ServiceTarget.Unmarshal(m, b)
}
func (m *Route_ServiceTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_ServiceTarget.Marshal(b, m, deterministic)
}
func (m *Route_ServiceTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_ServiceTarget.Merge(m, src)
}
func (m *Route_ServiceTarget) XXX_Size() int {
	return xxx_messageInfo_Route_ServiceTarget.Size(m)
}
func (m *Route_ServiceTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_ServiceTarget.DiscardUnknown(m)
}

var xxx_messageInfo_Route_ServiceTarget proto.InternalMessageInfo

func (m *Route_ServiceTarget) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Route_ServiceTarget) GetLeader() bool {
	if m != nil {
		return m.Leader
	}
	return false
}

func (m *Route_ServiceTarget) GetDrainBackends() bool {
	if m != nil {
		return m.DrainBackends
	}
	return false
}

type Route_HTTP struct {
	// Required. The name of the server that this route matches. May contain up
	// to 10 wildcard labels for plaintext HTTP routes or a single wildcard
	// label for TLS routes, followed by one or more non-wildcard labels. This
	// is matched against SNI to choose the TLS configuration and the Host
	// header to select the route.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// The HTTP path prefix to match against. Defaults to the root path `/`. To
	// create a route with a non-root path prefix, a root path route must already
	// exist for the same listener and domain, which will be used for the TLS and
	// HSTS configuration. Trailing slashes are stripped and only full path
	// segments are matched. The full unstripped path is sent in requests to the
	// target.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Enables best-effort session-backend stickiness using an encrypted cookie set
	// and managed by the router that will send requests containing the cookie to
	// the same backend instance. Incompatible with RedirectTarget.
	StickySessions       *Route_HTTP_StickySessions `protobuf:"bytes,3,opt,name=sticky_sessions,json=stickySessions,proto3" json:"sticky_sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Route_HTTP) Reset()         { *m = Route_HTTP{} }
func (m *Route_HTTP) String() string { return proto.CompactTextString(m) }
func (*Route_HTTP) ProtoMessage()    {}
func (*Route_HTTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{13, 1}
}

func (m *Route_HTTP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_HTTP.Unmarshal(m, b)
}
func (m *Route_HTTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_HTTP.Marshal(b, m, deterministic)
}
func (m *Route_HTTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_HTTP.Merge(m, src)
}
func (m *Route_HTTP) XXX_Size() int {
	return xxx_messageInfo_Route_HTTP.Size(m)
}
func (m *Route_HTTP) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_HTTP.DiscardUnknown(m)
}

var xxx_messageInfo_Route_HTTP proto.InternalMessageInfo

func (m *Route_HTTP) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Route_HTTP) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Route_HTTP) GetStickySessions() *Route_HTTP_StickySessions {
	if m != nil {
		return m.StickySessions
	}
	return nil
}

// Sticky session configuration. Currently there are no configuration options.
type Route_HTTP_StickySessions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route_HTTP_StickySessions) Reset()         { *m = Route_HTTP_StickySessions{} }
func (m *Route_HTTP_StickySessions) String() string { return proto.CompactTextString(m) }
func (*Route_HTTP_StickySessions) ProtoMessage()    {}
func (*Route_HTTP_StickySessions) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{13, 1, 0}
}

func (m *Route_HTTP_StickySessions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_HTTP_StickySessions.Unmarshal(m, b)
}
func (m *Route_HTTP_StickySessions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_HTTP_StickySessions.Marshal(b, m, deterministic)
}
func (m *Route_HTTP_StickySessions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_HTTP_StickySessions.Merge(m, src)
}
func (m *Route_HTTP_StickySessions) XXX_Size() int {
	return xxx_messageInfo_Route_HTTP_StickySessions.Size(m)
}
func (m *Route_HTTP_StickySessions) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_HTTP_StickySessions.DiscardUnknown(m)
}

var xxx_messageInfo_Route_HTTP_StickySessions proto.InternalMessageInfo

type Route_TCP struct {
	// The TCP port configuration for the route. Required and only valid for TCP
	// listeners.
	Port                 *Route_TCPPort `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Route_TCP) Reset()         { *m = Route_TCP{} }
func (m *Route_TCP) String() string { return proto.CompactTextString(m) }
func (*Route_TCP) ProtoMessage()    {}
func (*Route_TCP) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{13, 2}
}

func (m *Route_TCP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_TCP.Unmarshal(m, b)
}
func (m *Route_TCP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_TCP.Marshal(b, m, deterministic)
}
func (m *Route_TCP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_TCP.Merge(m, src)
}
func (m *Route_TCP) XXX_Size() int {
	return xxx_messageInfo_Route_TCP.Size(m)
}
func (m *Route_TCP) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_TCP.DiscardUnknown(m)
}

var xxx_messageInfo_Route_TCP proto.InternalMessageInfo

func (m *Route_TCP) GetPort() *Route_TCPPort {
	if m != nil {
		return m.Port
	}
	return nil
}

type Route_TCPPort struct {
	// The TCP port to bind to. If unspecified, a port will be automatically chosen
	// during route creation and provided in the response.
	Port                 uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route_TCPPort) Reset()         { *m = Route_TCPPort{} }
func (m *Route_TCPPort) String() string { return proto.CompactTextString(m) }
func (*Route_TCPPort) ProtoMessage()    {}
func (*Route_TCPPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{13, 3}
}

func (m *Route_TCPPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_TCPPort.Unmarshal(m, b)
}
func (m *Route_TCPPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_TCPPort.Marshal(b, m, deterministic)
}
func (m *Route_TCPPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_TCPPort.Merge(m, src)
}
func (m *Route_TCPPort) XXX_Size() int {
	return xxx_messageInfo_Route_TCPPort.Size(m)
}
func (m *Route_TCPPort) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_TCPPort.DiscardUnknown(m)
}

var xxx_messageInfo_Route_TCPPort proto.InternalMessageInfo

func (m *Route_TCPPort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// A TLS key.
type Key struct {
	// The unique identifier of this TLS key.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The algorithm used by this TLS key.
	Algorithm Key_Algorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=flynn.api.v1.Key_Algorithm" json:"algorithm,omitempty"`
	// The certificates that reference this TLS key.
	Certificates []string `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// The timestamp when this TLS key was created.
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{14}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Key) GetAlgorithm() Key_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return Key_KEY_ALG_UNSPECIFIED
}

func (m *Key) GetCertificates() []string {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *Key) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("flynn.api.v1.RouteConfig_Version", RouteConfig_Version_name, RouteConfig_Version_value)
	proto.RegisterEnum("flynn.api.v1.RouteChange_Action", RouteChange_Action_name, RouteChange_Action_value)
	proto.RegisterEnum("flynn.api.v1.Key_Algorithm", Key_Algorithm_name, Key_Algorithm_value)
	proto.RegisterType((*SetRoutesRequest)(nil), "flynn.api.v1.SetRoutesRequest")
	proto.RegisterType((*SetRoutesResponse)(nil), "flynn.api.v1.SetRoutesResponse")
	proto.RegisterType((*ListAppRoutesRequest)(nil), "flynn.api.v1.ListAppRoutesRequest")
	proto.RegisterType((*ListAppRoutesResponse)(nil), "flynn.api.v1.ListAppRoutesResponse")
	proto.RegisterType((*ListKeysRequest)(nil), "flynn.api.v1.ListKeysRequest")
	proto.RegisterType((*ListKeysResponse)(nil), "flynn.api.v1.ListKeysResponse")
	proto.RegisterType((*CreateKeyRequest)(nil), "flynn.api.v1.CreateKeyRequest")
	proto.RegisterType((*CreateKeyResponse)(nil), "flynn.api.v1.CreateKeyResponse")
	proto.RegisterType((*DeleteKeyRequest)(nil), "flynn.api.v1.DeleteKeyRequest")
	proto.RegisterType((*DeleteKeyResponse)(nil), "flynn.api.v1.DeleteKeyResponse")
	proto.RegisterType((*RouteConfig)(nil), "flynn.api.v1.RouteConfig")
	proto.RegisterType((*AppRoutes)(nil), "flynn.api.v1.AppRoutes")
	proto.RegisterType((*RouteChange)(nil), "flynn.api.v1.RouteChange")
	proto.RegisterType((*Route)(nil), "flynn.api.v1.Route")
	proto.RegisterType((*Route_ServiceTarget)(nil), "flynn.api.v1.Route.ServiceTarget")
	proto.RegisterType((*Route_HTTP)(nil), "flynn.api.v1.Route.HTTP")
	proto.RegisterType((*Route_HTTP_StickySessions)(nil), "flynn.api.v1.Route.HTTP.StickySessions")
	proto.RegisterType((*Route_TCP)(nil), "flynn.api.v1.Route.TCP")
	proto.RegisterType((*Route_TCPPort)(nil), "flynn.api.v1.Route.TCPPort")
	proto.RegisterType((*Key)(nil), "flynn.api.v1.Key")
}

func init() { proto.RegisterFile("router.proto", fileDescriptor_367072455c71aedc) }

var fileDescriptor_367072455c71aedc = []byte{
	// 1090 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xe1, 0x6e, 0xdb, 0x36,
	0x10, 0x8e, 0x2c, 0xc7, 0x89, 0xcf, 0xb1, 0x2b, 0xb3, 0x5d, 0xe3, 0x79, 0x68, 0x9b, 0xaa, 0xe8,
	0x96, 0xad, 0x80, 0xd2, 0xb8, 0x5d, 0x90, 0xa0, 0xc0, 0x00, 0xc7, 0xf1, 0x96, 0xcc, 0x41, 0x66,
	0xd0, 0x6e, 0xb1, 0xee, 0x8f, 0xc0, 0xc8, 0x67, 0x47, 0x88, 0x23, 0xb1, 0x12, 0x13, 0x4c, 0xaf,
	0xb0, 0x07, 0xe8, 0xbf, 0x3e, 0xc6, 0x9e, 0x6d, 0xc0, 0x7e, 0x0d, 0xa2, 0x28, 0xc7, 0x52, 0xec,
	0x62, 0xdb, 0x3f, 0xf2, 0xbb, 0xef, 0xee, 0xbb, 0x3b, 0x91, 0x3c, 0xc1, 0x46, 0xe0, 0x5f, 0x0b,
	0x0c, 0x2c, 0x1e, 0xf8, 0xc2, 0x27, 0x1b, 0xe3, 0x69, 0xe4, 0x79, 0x16, 0xe3, 0xae, 0x75, 0xb3,
	0xdb, 0x7c, 0x32, 0xf1, 0xfd, 0xc9, 0x14, 0x77, 0xa4, 0xed, 0xfc, 0x7a, 0xbc, 0x23, 0xdc, 0x2b,
	0x0c, 0x05, 0xbb, 0xe2, 0x09, 0xdd, 0xfc, 0x43, 0x03, 0x63, 0x80, 0x82, 0xc6, 0x21, 0x42, 0x8a,
	0x1f, 0xae, 0x31, 0x14, 0x64, 0x0f, 0x80, 0x71, 0x6e, 0xcb, 0xb8, 0x61, 0x43, 0xdb, 0xd2, 0xb7,
	0x2b, 0xad, 0x4d, 0x6b, 0x3e, 0xb0, 0xd5, 0xe6, 0x5c, 0xf9, 0x94, 0x59, 0xba, 0x24, 0x9b, 0xb0,
	0x36, 0x0a, 0x22, 0x3b, 0xb8, 0xf6, 0x1a, 0x85, 0x2d, 0x6d, 0x7b, 0x9d, 0x96, 0x46, 0x41, 0x44,
	0xaf, 0x3d, 0xf2, 0x1c, 0x6a, 0xf8, 0x3b, 0x47, 0x47, 0xe0, 0xc8, 0x0e, 0x05, 0x13, 0xd8, 0xd0,
	0xb7, 0xb4, 0xed, 0x0d, 0x5a, 0x4d, 0xd1, 0x41, 0x0c, 0x9a, 0x1f, 0x35, 0xa8, 0xcf, 0x25, 0x13,
	0x72, 0xdf, 0x0b, 0x91, 0xfc, 0x00, 0x55, 0x99, 0x89, 0xed, 0x5c, 0x30, 0x6f, 0x32, 0x4b, 0xe8,
	0xcb, 0x6c, 0x42, 0xd2, 0xa9, 0x23, 0x19, 0x34, 0xe9, 0x48, 0xb2, 0xf9, 0x4c, 0x56, 0xdb, 0x60,
	0x30, 0xce, 0xa7, 0x2e, 0x8e, 0x6c, 0xe1, 0x67, 0xf2, 0xaa, 0x29, 0x7c, 0xe8, 0x27, 0x89, 0x7d,
	0x07, 0x0f, 0x4e, 0xdd, 0x50, 0xdc, 0x16, 0xad, 0x1a, 0x45, 0xa0, 0xc8, 0x38, 0x4f, 0x32, 0x2a,
	0x53, 0xb9, 0x36, 0x11, 0xbe, 0xc8, 0x71, 0x55, 0x1d, 0xff, 0xb7, 0xab, 0x0f, 0x60, 0x35, 0xc9,
	0xad, 0x20, 0x73, 0x4b, 0x36, 0x66, 0x1d, 0xee, 0xc5, 0x32, 0x3d, 0x8c, 0xd2, 0x6c, 0xcc, 0x03,
	0x30, 0x6e, 0x21, 0x25, 0xfa, 0x1c, 0x8a, 0x97, 0x18, 0xa5, 0x72, 0xf5, 0xac, 0x5c, 0x0f, 0x23,
	0x2a, 0xcd, 0xe6, 0x2b, 0x30, 0x3a, 0x01, 0x32, 0x81, 0x31, 0xa4, 0x8a, 0x7b, 0x02, 0x15, 0x1e,
	0xb8, 0x37, 0x4c, 0xa0, 0x7d, 0x89, 0x51, 0x43, 0x93, 0xea, 0xa0, 0xa0, 0x1e, 0x46, 0xe6, 0x3e,
	0xd4, 0xe7, 0x9c, 0x94, 0xe0, 0x33, 0xd0, 0x53, 0xf6, 0x42, 0xbd, 0xd8, 0x6a, 0x7e, 0x0d, 0xc6,
	0x11, 0x4e, 0x31, 0x23, 0x47, 0xa0, 0xe8, 0xb1, 0x2b, 0x94, 0x9e, 0x65, 0x2a, 0xd7, 0xb1, 0xc2,
	0x1c, 0xef, 0xbf, 0x28, 0xfc, 0xa9, 0x41, 0x25, 0x39, 0x12, 0xbe, 0x37, 0x76, 0x27, 0xe4, 0x0d,
	0xac, 0xdd, 0x60, 0x10, 0xba, 0xbe, 0x27, 0x1d, 0x6b, 0xad, 0xa7, 0x8b, 0x8e, 0x8f, 0xe4, 0x5a,
	0xef, 0x12, 0x22, 0x4d, 0x3d, 0x72, 0x5f, 0xae, 0xf0, 0x6f, 0xbf, 0x9c, 0xb9, 0x0b, 0x6b, 0x2a,
	0x16, 0xd9, 0x84, 0xfb, 0xef, 0xba, 0x74, 0x70, 0xf2, 0xcb, 0x99, 0xfd, 0xf6, 0x6c, 0xd0, 0xef,
	0x76, 0x4e, 0x7e, 0x3c, 0xe9, 0x1e, 0x19, 0x2b, 0xa4, 0x0a, 0xe5, 0xd4, 0xb0, 0x6b, 0x68, 0xe6,
	0xcf, 0x50, 0x9e, 0x85, 0x22, 0x06, 0xe8, 0x8c, 0x73, 0xd5, 0x91, 0x78, 0x49, 0x5e, 0x40, 0x29,
	0x93, 0xc5, 0xfd, 0x05, 0x55, 0x50, 0x45, 0x31, 0xff, 0x9e, 0xf5, 0x40, 0xde, 0x04, 0xb2, 0x0f,
	0x25, 0xe6, 0x88, 0xdb, 0x16, 0x6c, 0x2d, 0xbd, 0x41, 0x56, 0x5b, 0xf2, 0xa8, 0xe2, 0xc7, 0xb2,
	0xe7, 0x38, 0xf6, 0x83, 0xe4, 0x0c, 0x2e, 0x93, 0x4d, 0x28, 0xe4, 0x5b, 0x58, 0x65, 0x63, 0x81,
	0x81, 0xbc, 0x4b, 0x4b, 0xb8, 0x09, 0xc3, 0x7c, 0x0f, 0xa5, 0x44, 0x89, 0x3c, 0x04, 0xd2, 0xee,
	0x0c, 0xef, 0xb6, 0xa7, 0x0e, 0x55, 0x85, 0x77, 0x68, 0xb7, 0x3d, 0xec, 0x1a, 0xda, 0x1c, 0xf4,
	0xb6, 0x7f, 0x14, 0x43, 0x85, 0x39, 0xe8, 0xa8, 0x7b, 0xda, 0x1d, 0x76, 0x0d, 0xdd, 0xfc, 0xab,
	0x08, 0xab, 0x52, 0x6b, 0xd1, 0xc1, 0x22, 0x0f, 0xa1, 0xc4, 0x59, 0x80, 0x9e, 0x90, 0x05, 0x95,
	0xa9, 0xda, 0x91, 0x63, 0xa8, 0x85, 0x18, 0xdc, 0xb8, 0x0e, 0xda, 0x82, 0x05, 0x13, 0x14, 0xaa,
	0x88, 0x45, 0xa7, 0xc5, 0x1a, 0x24, 0xcc, 0xa1, 0x24, 0xd2, 0x6a, 0x38, 0xbf, 0x25, 0x16, 0xdc,
	0x1f, 0xb9, 0x21, 0x3b, 0x9f, 0xc6, 0xb7, 0x07, 0xb9, 0xcd, 0xa6, 0xee, 0x0d, 0x86, 0x8d, 0xa2,
	0x7c, 0x81, 0xea, 0xca, 0xd4, 0x43, 0xe4, 0x6d, 0x69, 0x20, 0x16, 0x14, 0x2f, 0x84, 0xe0, 0x8d,
	0x55, 0xa9, 0xd7, 0x58, 0xa4, 0x77, 0x3c, 0x1c, 0xf6, 0x8f, 0x57, 0xa8, 0xe4, 0x91, 0x17, 0xa0,
	0x0b, 0x87, 0x37, 0x4a, 0x92, 0xbe, 0xb9, 0x88, 0x3e, 0xec, 0xc4, 0xec, 0x98, 0xd5, 0xfc, 0x00,
	0xd5, 0x4c, 0xb2, 0xe4, 0x29, 0x6c, 0xa4, 0x75, 0xce, 0xf5, 0xa6, 0xa2, 0xb0, 0x33, 0xd5, 0xa2,
	0x29, 0xb2, 0x11, 0x06, 0xe9, 0xab, 0x99, 0xec, 0xe2, 0xb7, 0x7c, 0x14, 0x30, 0xd7, 0xb3, 0xcf,
	0x99, 0x73, 0x89, 0xde, 0x28, 0x94, 0x2d, 0x5a, 0xa7, 0x55, 0x89, 0x1e, 0x2a, 0xb0, 0xf9, 0x51,
	0x83, 0x62, 0x9c, 0x70, 0x1c, 0x67, 0xe4, 0x5f, 0x31, 0xd7, 0x53, 0x22, 0x6a, 0x17, 0x7f, 0x16,
	0xce, 0xc4, 0x85, 0xfa, 0x00, 0x72, 0x4d, 0xfa, 0x70, 0x2f, 0x14, 0xae, 0x73, 0x19, 0xd9, 0x21,
	0x86, 0xf1, 0xbd, 0x09, 0x55, 0xff, 0xbf, 0x59, 0xd6, 0x0f, 0x6b, 0x20, 0xf9, 0x03, 0x45, 0xa7,
	0xb5, 0x30, 0xb3, 0x6f, 0x1a, 0x50, 0xcb, 0x32, 0x9a, 0x7b, 0xa0, 0x0f, 0x3b, 0x7d, 0xb2, 0x03,
	0x45, 0xee, 0x07, 0x42, 0x3d, 0x23, 0x5f, 0x2d, 0x69, 0x60, 0xdf, 0x0f, 0x04, 0x95, 0xc4, 0xe6,
	0x23, 0x58, 0x53, 0x80, 0x4c, 0x3d, 0xf5, 0xad, 0x26, 0xe6, 0xc3, 0x75, 0x28, 0x39, 0xf2, 0xf9,
	0x30, 0x3f, 0x15, 0x40, 0xef, 0x61, 0xb4, 0xf0, 0xdc, 0x1d, 0x40, 0x99, 0x4d, 0x27, 0x7e, 0xe0,
	0x8a, 0x8b, 0x2b, 0x59, 0x79, 0x2d, 0x2f, 0xdd, 0xc3, 0xc8, 0x6a, 0xa7, 0x14, 0x7a, 0xcb, 0x26,
	0x26, 0x6c, 0x38, 0x18, 0x08, 0x77, 0xec, 0x3a, 0x2c, 0x7e, 0x00, 0x74, 0x39, 0x73, 0x32, 0x18,
	0x79, 0x03, 0x15, 0x47, 0xbe, 0xc8, 0x76, 0x3c, 0xe7, 0xe5, 0x61, 0xab, 0xb4, 0x9a, 0x56, 0xf2,
	0x13, 0x60, 0xa5, 0x3f, 0x01, 0xd6, 0x30, 0xfd, 0x09, 0xa0, 0x90, 0xd0, 0x63, 0xc0, 0x1c, 0x43,
	0x79, 0x26, 0x1c, 0xbf, 0x57, 0xbd, 0xee, 0x7b, 0xbb, 0x7d, 0xfa, 0x53, 0xee, 0x42, 0x3e, 0x00,
	0x23, 0x35, 0x74, 0x3b, 0x1d, 0xbb, 0xdf, 0xfa, 0x7e, 0xcf, 0xd0, 0xe6, 0x51, 0x3a, 0x68, 0xdb,
	0xad, 0x97, 0xaf, 0xf7, 0x8d, 0x42, 0x1e, 0x7d, 0xfd, 0xf2, 0x60, 0xcf, 0xd0, 0x5b, 0x9f, 0x74,
	0x28, 0xc9, 0x06, 0x07, 0xe4, 0x14, 0xca, 0xb3, 0x79, 0x4f, 0x1e, 0x67, 0x1b, 0x91, 0xff, 0x2b,
	0x69, 0x3e, 0x59, 0x6a, 0x57, 0x83, 0xe1, 0x57, 0xa8, 0x66, 0x26, 0x2f, 0x31, 0xb3, 0x1e, 0x8b,
	0x46, 0x78, 0xf3, 0xd9, 0x67, 0x39, 0x2a, 0x72, 0x0f, 0xd6, 0xd3, 0xc9, 0x4a, 0x1e, 0xdd, 0x75,
	0x98, 0x1b, 0xc2, 0xcd, 0xc7, 0xcb, 0xcc, 0x49, 0x28, 0x73, 0x85, 0x9c, 0x41, 0x79, 0x36, 0x36,
	0xf3, 0x45, 0xe7, 0x87, 0x70, 0xbe, 0xe8, 0x3b, 0xf3, 0x36, 0x89, 0x37, 0x1b, 0x92, 0xf9, 0x78,
	0xf9, 0x29, 0x9b, 0x8f, 0x77, 0x67, 0xba, 0x9a, 0x2b, 0x87, 0xab, 0xbf, 0xe9, 0x8c, 0xbb, 0xe7,
	0x25, 0x79, 0x5c, 0x5e, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x26, 0x76, 0x43, 0x40, 0x5f, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	// SetRoutes takes a desired list of routes for a set of apps, calculates the
	// changes that are needed to the existing routes to realise that list, and
	// then either atomically applies those changes or returns them for user
	// confirmation (otherwise known as a dry run).
	//
	// The given list of routes for each app is expected to contain the desired
	// configuration for all of the app's routes, and so if any existing routes
	// are not contained in the list, or they match ones in the list but have
	// different configuration, then they will be either deleted or updated.
	SetRoutes(ctx context.Context, in *SetRoutesRequest, opts ...grpc.CallOption) (*SetRoutesResponse, error)
	// ListAppRoutes list routes for a set of apps.
	ListAppRoutes(ctx context.Context, in *ListAppRoutesRequest, opts ...grpc.CallOption) (*ListAppRoutesResponse, error)
	// Lists TLS keys that can be referenced by static certificates.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// Creates a TLS key. If the key already exists, it will be returned instead
	// of creating a duplicate, making the method idempotent.
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	// Deletes a TLS key. The key must not be referenced by any routes. This
	// method is idempotent and will not return an error if the specified key has
	// already been deleted.
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) SetRoutes(ctx context.Context, in *SetRoutesRequest, opts ...grpc.CallOption) (*SetRoutesResponse, error) {
	out := new(SetRoutesResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/SetRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) ListAppRoutes(ctx context.Context, in *ListAppRoutesRequest, opts ...grpc.CallOption) (*ListAppRoutesResponse, error) {
	out := new(ListAppRoutesResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/ListAppRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	out := new(CreateKeyResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/CreateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	out := new(DeleteKeyResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.Router/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	// SetRoutes takes a desired list of routes for a set of apps, calculates the
	// changes that are needed to the existing routes to realise that list, and
	// then either atomically applies those changes or returns them for user
	// confirmation (otherwise known as a dry run).
	//
	// The given list of routes for each app is expected to contain the desired
	// configuration for all of the app's routes, and so if any existing routes
	// are not contained in the list, or they match ones in the list but have
	// different configuration, then they will be either deleted or updated.
	SetRoutes(context.Context, *SetRoutesRequest) (*SetRoutesResponse, error)
	// ListAppRoutes list routes for a set of apps.
	ListAppRoutes(context.Context, *ListAppRoutesRequest) (*ListAppRoutesResponse, error)
	// Lists TLS keys that can be referenced by static certificates.
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	// Creates a TLS key. If the key already exists, it will be returned instead
	// of creating a duplicate, making the method idempotent.
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	// Deletes a TLS key. The key must not be referenced by any routes. This
	// method is idempotent and will not return an error if the specified key has
	// already been deleted.
	DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error)
}

// UnimplementedRouterServer can be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (*UnimplementedRouterServer) SetRoutes(ctx context.Context, req *SetRoutesRequest) (*SetRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoutes not implemented")
}
func (*UnimplementedRouterServer) ListAppRoutes(ctx context.Context, req *ListAppRoutesRequest) (*ListAppRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppRoutes not implemented")
}
func (*UnimplementedRouterServer) ListKeys(ctx context.Context, req *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (*UnimplementedRouterServer) CreateKey(ctx context.Context, req *CreateKeyRequest) (*CreateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (*UnimplementedRouterServer) DeleteKey(ctx context.Context, req *DeleteKeyRequest) (*DeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_SetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/SetRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SetRoutes(ctx, req.(*SetRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_ListAppRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).ListAppRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/ListAppRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).ListAppRoutes(ctx, req.(*ListAppRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.Router/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flynn.api.v1.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRoutes",
			Handler:    _Router_SetRoutes_Handler,
		},
		{
			MethodName: "ListAppRoutes",
			Handler:    _Router_ListAppRoutes_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _Router_ListKeys_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _Router_CreateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _Router_DeleteKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "router.proto",
}
